	I choose to implement my BattleShip game using a class MapCell as the main Location implementing class which represents an x,y coordinate on the gamemap. The GameMap class is the actual board and is responsible for placing ships in the proper position and checking the validity of the placements and moves of each player. The Ship class represents a ship and contains the ship's size for reference in placing the ships. 
	My logic in implementing the game was that each mapcell wil hold a reference to the ship that occupies it, and will alspo know if it has been hit or not, so two shots to the same location won't each count as hits. The BattleShip game does do some validity checking but for the most part that responsiblity lies in the gamemap class. The player class places a ship by building a mapcell with a given ship referenced within that cell and passing the mapcell back to the caller as a Location object. The gamemap uses this mapcell to find the proper locations on the board at which to add a reference to the ship referenced in the player created mapcell.
	I would like to participate in the tournament, my ComputerPlayer is rather rudimentary but it may fare better than I think it will. It's logic is basically shoot every square on the board. 
	My Driver class simply instantiates a BattleShip game, prompts for type of players and initializes the game. It is relatively straight forward.
	I didn't do any input validation aside from making sure players can only enter valid locations. In other words if you type a string instead of 2 integers at a prompt for a shot there will be an exception as Swap said to only worry about making sure if the user entered a location bigger than the board they should be prompted again, but not to worry about improper input.
	To Run the program just compile the class files and run the Driver class as main, it will then promp you for human or computer players and start the game.